#!/usr/bin/env bash

# 02/01/2015 - <inascime@lbl.gov>
# Pulls dedicated information with explanations about a job
# Checkjob currently is under development.

export PATH=/opt/slurm/default/bin:$PATH
LC_ALL=C

if [ -n "$NERSC_HOST" ]; then
	c_host=$NERSC_HOST
else
# In case NERSC_HOST is unset, attempt to run hostname and then strip the 2 last characters out
	c_host=$(hostname)
	c_host=${c_host%??}
fi

usage() {
echo "Usage: checkjob jobid[,jobid,jobid...]"
exit "$1"
}

checkjob=$(basename -- "$0")

validate() {
# Validate availability of SLURM tools
if ! type -P "$1" &>/dev/null; then
	echo "$checkjob: Fatal error - $1 not found."
	exit 1
fi
}

validate squeue
validate sinfo

if (( $# == 0 )); then usage 1;fi
if (( $# > 1 )); then usage 1;fi
if [[ $1 == "--help" ]]; then usage 0;fi
reasonfile=$(mktemp)
statesfile=$(mktemp)
# Lets create a little reason code database that we can easily work with...
cat <<-EOF > $reasonfile
	None: The job is running.
	AssociationJobLimit: The job's association has reached its maximum job count.
	AssociationResourceLimit: The job's association has reached some resource limit. 
	AssociationTimeLimit: The job's association has reached its time limit. 
	BadConstraints: The job's constraints can not be satisfied. 
	BeginTime: The job's earliest start time has not yet been reached. 
	BlockFreeAction: An IBM BlueGene block is being freed and can not allow more jobs to start. 
	BlockMaxError: An IBM BlueGene block has too many cnodes in error state to allow more jobs to start. 
	Cleaning: The job is being requeued and still cleaning up from its previous execution. 
	Dependency: This job is waiting for a dependent job to complete. 
	FrontEndDown: No front end node is available to execute this job. 
	InactiveLimit: The job reached the system InactiveLimit. 
	InvalidAccount: The job's account is invalid. 
	InvalidQOS: The job's QOS is invalid. 
	JobHeldAdmin: The job is held by a system administrator. 
	JobHeldUser:  The job is held by the user. 
	JobLaunchFailure: The job could not be launched. This may be due to a file system problem, invalid program name, etc. 
	Licenses: The job is waiting for a license. 
	NodeDown: A node required by the job is down. 
	NonZeroExitCode: The job terminated with a non-zero exit code. 
	PartitionDown: The partition required by this job is in a DOWN state. 
	PartitionInactive: The partition required by this job is in an Inactive state and not able to start jobs. 
	PartitionNodeLimit: The number of nodes required by this job is outside of it's partitions current limits. Can also indicate that required nodes are DOWN or DRAINED. 
	PartitionTimeLimit: The job's time limit exceeds it's partition's current time limit. 
	Priority: One or more higher priority jobs exist for this partition or advanced reservation. 
	Prolog: It's PrologSlurmctld program is still running. 
	QOSJobLimit: The job's QOS has reached its maximum job count. 
	QOSResourceLimit: The job's QOS has reached some resource limit. 
	QOSTimeLimit: The job's QOS has reached its time limit. 
	ReqNodeNotAvail: Some node specifically required by the job is not currently available. The node may currently be in use, reserved for another job, in an advanced reservation, DOWN, DRAINED, or not responding. Nodes which are DOWN, DRAINED, or not responding will be identified as part of the job's "reason" field as "UnavailableNodes". Such nodes will typically require the intervention of a system administrator to make available. 
	Reservation: The job is waiting its advanced reservation to become available. 
	Resources: The job is waiting for resources to become available. 
	SystemFailure: Failure of the Slurm system, a file system, the network, etc. 
	TimeLimit: The job exhausted its time limit. 
	QOSUsageThreshold: Required QOS threshold has been breached. 
	WaitingForScheduling: No reason has been set for this job yet. Waiting for the scheduler to determine the appropriate reason. 
	EOF

# And a little database for job state codes as well...

cat <<-EOF > $statesfile
	BF BOOT_FAIL: Job terminated due to launch failure, typically due to a hardware failure (e.g. unable to boot the node or block and the job can not be requeued). 
	CA CANCELLED: Job was explicitly cancelled by the user or system administrator. The job may or may not have been initiated. 
	CD COMPLETED: Job has terminated all processes on all nodes with an exit code of zero. 
	CF CONFIGURING: Job has been allocated resources, but are waiting for them to become ready for use (e.g. booting). 
	CG COMPLETING:  Job is in the process of completing. Some processes on some nodes may still be active. 
	F FAILED: Job terminated with non-zero exit code or other failure condition. 
	NF NODE_FAIL: Job terminated due to failure of one or more allocated nodes. 
	PD PENDING: Job is awaiting resource allocation. 
	PR PREEMPTED: Job terminated due to preemption. 
	R RUNNING: Job currently has an allocation. 
	SE SPECIAL_EXIT: The job was requeued in a special state. This state can be set by users, typically in EpilogSlurmctld, if the job has terminated with a particular exit value. 
	ST STOPPED: Job has an allocation, but execution has been stopped with SIGSTOP signal. CPUS have been retained by this job. 
	S SUSPENDED: Job has an allocation, but execution has been suspended and CPUs have been released for other jobs. 
	TO TIMEOUT:  Job terminated upon reaching its time limit. 
	EOF

convert_t()
{
# convert 1-00:00:00 to 24:00:00
	awk '{n=split($'$1',a,"[-:]");if(n=="4")a[1]=a[1]*24+a[2];if(n=="4")$'$1' = sprintf("%s:%s:%s", a[1], a[3], a[4]);print}'
}

showtime() {
#Convert seconds to hours minutes seconds
    num=$1
    min=0
    hour=0
    day=0
    if((num>59));then
        ((sec=num%60))
        ((num=num/60))
        if((num>59));then
            ((min=num%60))
            ((num=num/60))
            if((num>23));then
                ((hour=num%24))
                ((day=num/24))
            else
                ((hour=num))
            fi
        else
            ((min=num))
        fi
    else
        ((sec=num))
    fi
    elapsed_time=$(echo "${day}d ${hour}h ${min}m ${sec}s")
}
queuef=$(mktemp)
squeue -o "%.i %.t %.S %.r %.l %.M %.V %.u %.P %.a %.e" | convert_t 5 | convert_t 6 > "$queuef"
re='^[0-9]+$'
IFS=, read -ra jid <<< "$1"; for a in "${jid[@]}"
do
	if [[ ! "$a" =~ $re ]]; then echo "$checkjob: $a not a valid jobid";continue;fi 
	if ! grep -w "$a" "$queuef" &>/dev/null; then echo "$checkjob: $a jobid not found";continue;fi
	echo " --- "
	nodelist=$(scontrol show job "$a" | grep -E -w "NodeList=*" | sed -e 's/NodeList=//')
	cmd=$(scontrol show job "$a" | grep Command= | sed -e 's/Command=//')
	end_time=$(awk -v jobid="$a" '$1 == jobid {print $11}' "$queuef")
	partition=$(awk -v jobid="$a" '$1 == jobid {print $9}' "$queuef")
	repo=$(awk -v jobid="$a" '$1 == jobid {print $10}' "$queuef")
	user=$(awk -v jobid="$a" '$1 == jobid {print $8}' "$queuef")
	submitted=$(awk -v jobid="$a" '$1 == jobid {print $7}' "$queuef")
	stime=$(awk -v jobid="$a" '$1 == jobid {print $3}' "$queuef")
	requested=$(awk -v jobid="$a" '$1 == jobid {print $5}' "$queuef")
	used=$(awk -v jobid="$a" '$1 == jobid {print $6}' "$queuef")
	current_date=$(date +"%s")
	job_date=$(date --date="$(echo "$submitted" | tr 'T' ' ')-0800" +%s)
	elapsed_seconds=$((current_date-job_date))
	showtime "$elapsed_seconds"
	echo "Jobid: (${a}) User: (${user}) Partition: (${partition}) Repo: (${repo})" 
	echo "Walltime: (${used}) of (${requested}) SubmitTime: (${submitted}) (Time queued total: ${elapsed_time}) "
	echo "Command: (${cmd#???})"
	if [[ "$stime" != "N/A" ]]; then
		echo "Approximate START_TIME: (${stime}) Approximate END_TIME: (${end_time})"
	else
		echo "This job doesn't have a START_TIME yet, see details below"
	fi

	st="$(awk -v jobid="$a" '$1 == jobid {print $2}' "$queuef")"
	echo "CURRENT STATE - ($(grep -w "$st" $statesfile))"
	rs=$(awk -v jobid="$a" '$1 == jobid {print $4}' "$queuef")
	echo "REASON - ($(grep -w "$rs" "$reasonfile"))"
	if [[ "$nodelist" != "   (null)" ]]; then 
		echo "Nodelist: (${nodelist#???})"
	else
		echo "Nodelist: (This job does not have any nodes allocated to it yet.)"
	fi
done
rm -f "$statesfile" "$reasonfile" "$queuef"
exit 0
